import { Controller, Get, Param, Query } from '@nestjs/common';
import { <%= serviceName %> } from '../<%= moduleName %>/<%= moduleName %>.service';
import { ApiTags } from '@nestjs/swagger';
import { BaseQueryDto } from 'src/common/dto/base-query.dto';
import { ApiResponseHelper } from 'src/common/helpers/response.helper';
import { AutoSwaggerQuery } from 'src/common/decorators/auto-swagger-query.decorator';
import { ApiResponseEntity } from 'src/common/decorators/api-response-entity';
import { <%= dtoName %> } from '../<%= moduleName %>/dto/<%= moduleName %>.dto';

@ApiTags('<%= moduleName %>-report')
@Controller('<%= moduleName %>-report')
export class <%= className %>ReportController {
  constructor(private readonly service: <%= serviceName %>) {}

  @Get()
  @ApiResponseEntity(<%= dtoName %>, 'list')
  @AutoSwaggerQuery()
  async findAll(@Query() query: BaseQueryDto) {
    const parsed = {
      pageIndex: parseInt(String(query.pageIndex ?? '1'), 10),
      pageSize: parseInt(String(query.pageSize ?? '10'), 10),
      filter: query.filter ? JSON.parse(query.filter) : {},
      sortKey: query.sortKey,
      sortValue: query.sortValue,
      search_field: query.search_field ?? [],
      search_keyword: query.search_keyword ?? '',
      iinclude: query.include ?? [<%- JSON.stringify(joins) %>],
    };

    try {
      const result = await this.service.findAllCustom(parsed);
      return ApiResponseHelper.success(result.data, 'list', undefined, result.total);
    } catch (error) {
      return ApiResponseHelper.failed(null, 'Gagal mengambil data', 500, error);
    }
  }

  @Get(':id')
  @ApiResponseEntity(<%= dtoName %>, 'get')
  async findOne(@Param('id') id: string) {
    try {
      const result = await this.service.findOne(id);
      if (!result) {
        return ApiResponseHelper.failed(null, 'Data tidak ditemukan', 404);
      }
      return ApiResponseHelper.success(result, 'get');
    } catch (error) {
      return ApiResponseHelper.failed(null, 'Terjadi kesalahan', 500, error);
    }
  }
}
